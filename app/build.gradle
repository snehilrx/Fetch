plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id "androidx.navigation.safeargs.kotlin"
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf'
}

android {
    signingConfigs {
        release {
            storeFile file(System.properties.get('KEY_PATH'))
            storePassword System.properties.get('STORE_PASSWORD')
            keyPassword System.properties.get('KEY_PASSWORD')
            keyAlias System.properties.get('KEY_ALIAS')
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    compileSdk env.compileSdk
    compileSdkPreview "UpsideDownCake"

    defaultConfig {
        applicationId env.applicationId
        minSdk env.minSdk
        targetSdk env.targetSdk
        versionCode env.versionCode
        versionName env.versionName

        testInstrumentationRunner "com.otaku.fetch.FetchTestRunner"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
        }
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.3"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
        viewBinding true
        compose true
    }
    namespace 'com.otaku.fetch'
    dynamicFeatures = []
}

dependencies {
    implementation project(path: ":base")
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.5.0'
    implementation 'com.google.firebase:firebase-analytics-ktx:21.4.0'
    implementation "androidx.core:core-ktx:$versions.core_ktx"
    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation "com.google.android.material:material:$versions.material"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintlayout"
    implementation "androidx.navigation:navigation-fragment:$versions.nav"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.nav"
    implementation "androidx.hilt:hilt-work:$versions.work_hilt"
    implementation "androidx.work:work-runtime-ktx:$versions.work"
    implementation project(path: ':kickassanime')
    implementation 'com.google.firebase:firebase-perf:20.5.0'
    androidTestImplementation "io.github.rascaler:assertj:$versions.assertJ"
    testImplementation "junit:junit:$versions.junit"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidx_junit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espresso_core"
    // Hilt
    implementation "com.google.dagger:hilt-android:$versions.hilt"
    kapt "com.google.dagger:hilt-compiler:$versions.hilt"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$versions.hilt"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$versions.hilt"

    implementation "io.github.lapism:search:$versions.search_lapism"
    // Test
    androidTestImplementation "org.assertj:assertj-core:$versions.assertJCore"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"
    implementation "androidx.multidex:multidex:$versions.multidex"

    implementation("androidx.hilt:hilt-work:$versions.work_hilt")
    androidTestImplementation("androidx.work:work-testing:$versions.work")
    // When using Kotlin.
    kapt("androidx.hilt:hilt-compiler:1.0.0")
    implementation "androidx.multidex:multidex:2.0.1"

    // Jetpack Compose
    def composeBom = platform("androidx.compose:compose-bom:$versions.compose_bom")
    implementation composeBom
    androidTestImplementation composeBom

    // Choose one of the following:
    // Material Design 3
    implementation "androidx.compose.material3:material3:$versions.compose_material3"

    // Android Studio Preview support
    implementation "androidx.compose.ui:ui-tooling-preview:$versions.compose_vector_animations"
    debugImplementation "androidx.compose.ui:ui-tooling:$versions.compose_vector_animations"

    // UI Tests
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$versions.compose_vector_animations"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$versions.compose_vector_animations"
    implementation "androidx.datastore:datastore-preferences:$versions.datastore"

    // Optional - Integration with activities
    implementation "androidx.activity:activity-compose:$versions.compose_activity"
    implementation "androidx.compose.runtime:runtime-livedata:$versions.compose_vector_animations"
}
